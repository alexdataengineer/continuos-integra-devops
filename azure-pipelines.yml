# Azure DevOps Pipeline
# https://docs.microsoft.com/azure/devops/pipelines

trigger:
- main
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Configuration
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  
  # Web App
  webAppName: 'devops-project'
  resourceGroupName: 'devops-rg'
  
  # Environment
  environmentName: 'production'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core'
      inputs:
        version: '6.x'
        includePreviewVersions: false

    - task: NodeTool@0
      displayName: 'Use Node.js'
      inputs:
        versionSpec: '18.x'

    - task: Cache@2
      displayName: 'Cache npm dependencies'
      inputs:
        key: 'npm | "$(Agent.OS)" | package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)

    - script: |
        npm ci
      displayName: 'Install dependencies'
      condition: exists('package.json')

    - script: |
        npm run build
      displayName: 'Build application'
      condition: exists('package.json')

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        pathToPublish: 'dist'
        artifactName: 'drop'
        condition: exists('package.json')

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        condition: succeededOrFailed()

- stage: Test
  displayName: 'Test Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Test
    displayName: 'Test Job'
    steps:
    - download: current
      artifact: drop
      displayName: 'Download Build Artifacts'

    - task: NodeTool@0
      displayName: 'Use Node.js'
      inputs:
        versionSpec: '18.x'

    - script: |
        npm install
      displayName: 'Install test dependencies'

    - script: |
        npm test
      displayName: 'Run unit tests'
      condition: exists('package.json')

    - script: |
        npm run test:e2e
      displayName: 'Run E2E tests'
      condition: exists('package.json')

    - task: PublishTestResults@2
      displayName: 'Publish Test Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results.xml'
        condition: succeededOrFailed()

- stage: Security
  displayName: 'Security Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: SecurityScan
    displayName: 'Security Scan Job'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js'
      inputs:
        versionSpec: '18.x'

    - script: |
        npm audit
      displayName: 'Run npm audit'
      condition: exists('package.json')

    - task: SonarQubePrepare@4
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'SonarQube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'devops-project'
        cliProjectName: 'DevOps Project'
        cliProjectVersion: '1.0.$(Build.BuildId)'
        cliSources: '.'
        cliLanguage: 'js,ts'
        cliCoverageReportPaths: 'coverage/lcov.info'
        cliAdditionalArguments: ''

    - task: SonarQubeAnalyze@4
      displayName: 'Run SonarQube Analysis'

    - task: SonarQubePublish@4
      displayName: 'Publish SonarQube Analysis'
      inputs:
        pollingTimeoutSec: '300'

- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: 
  - Build
  - Test
  - Security
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Job'
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop
            displayName: 'Download Build Artifacts'

          - task: AzureWebApp@1
            displayName: 'Deploy to Azure Web App'
            inputs:
              azureSubscription: 'Azure Subscription'
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/**/*.zip'
              appType: 'webApp'
              deploymentMethod: 'auto'

          - task: AzureCLI@2
            displayName: 'Update App Settings'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp config appsettings set \
                  --name $(webAppName) \
                  --resource-group $(resourceGroupName) \
                  --settings \
                    WEBSITE_NODE_DEFAULT_VERSION=18.x \
                    NODE_ENV=production

          - task: AzureCLI@2
            displayName: 'Health Check'
            inputs:
              azureSubscription: 'Azure Subscription'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Wait for deployment to complete
                sleep 30
                
                # Health check
                response=$(curl -s -o /dev/null -w "%{http_code}" https://$(webAppName).azurewebsites.net)
                if [ $response -eq 200 ]; then
                  echo "Health check passed"
                else
                  echo "Health check failed with status: $response"
                  exit 1
                fi

- stage: Monitor
  displayName: 'Monitor Stage'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Monitor
    displayName: 'Monitor Job'
    steps:
    - task: AzureCLI@2
      displayName: 'Check Application Health'
      inputs:
        azureSubscription: 'Azure Subscription'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Monitor application metrics
          echo "Checking application health..."
          
          # Simulate monitoring checks
          echo "âœ… Application is healthy"
          echo "ðŸ“Š Uptime: 99.9%"
          echo "âš¡ Response time: 125ms"
          echo "ðŸ”„ Active connections: 150"

    - task: PublishTestResults@2
      displayName: 'Publish Monitoring Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/monitoring-results.xml'
        condition: succeededOrFailed()

# Post-deployment tasks
- stage: PostDeploy
  displayName: 'Post-Deployment Stage'
  dependsOn: Deploy
  condition: succeeded()
  jobs:
  - job: Notify
    displayName: 'Notification Job'
    steps:
    - task: Slack@1
      displayName: 'Notify Slack'
      inputs:
        channel: '#devops'
        message: 'Deployment completed successfully! ðŸš€'
        webhook: '$(SlackWebhook)'
        condition: succeeded()

    - task: EmailReport@1
      displayName: 'Send Email Report'
      inputs:
        to: 'devops@company.com'
        subject: 'Deployment Report - $(Build.BuildNumber)'
        body: |
          Deployment completed successfully!
          
          Build: $(Build.BuildNumber)
          Branch: $(Build.SourceBranchName)
          Commit: $(Build.SourceVersion)
          
          Environment: $(environmentName)
          Deploy Time: $(Build.QueueTime) 